{"version":3,"sources":["category.js","arrayCategory/sortRepeatArray.js","arrayCategory/intArray.js","arrayCategory/floatArray.js","arrayCategory/charStringOption.js","arrayCategory/stringArray.js","arrayCategory/charArray.js","arrayCategory.js","stringCategory.js","testCaseGenerator.js","index.js"],"names":["Category","handleSelect","evt","props","handleChange","id","align","onChange","this","value","React","Component","SortRepeatArray","callSortChange","handleSortChange","callRepeatedChange","handleRepeatedChange","type","onClick","IntArray","callInputChange","handleInputChange","for","name","min","max","FloatArray","step","CharStringOption","callLower","handleLower","callUpper","handleUpper","callSpecial","handleSpecial","StringArray","CharArray","handleNum","ArrayCategory","handleDataTypeChange","setState","dataType","target","currentView","minIn","maxIn","sort","repeated","decimals","lowerCase","upperCase","numbers","special","strLength","state","callArrayGenerator","preventDefault","generate","arraySize","StringCategory","chance","require","Chance","generateArray","sorted","charPool","temp","Array","seen","minMaxTurn","i","rand","choiceGenerator","includes","found","changed","length","indexOf","limit","a","b","testCase","join","fixCharTest","fixStringTest","integer","parseInt","floating","parseFloat","fixed","bool","character","pool","string","test","len","count","App","generateTestCase","lower","upper","number","String","arrayGeneration","testcase","arrayGenerator","currentCategory","copyToClipboard","r","document","createRange","selectNode","getElementById","window","getSelection","removeAllRanges","addRange","execCommand","alert","ReactDOM","render"],"mappings":"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","file":"static/js/main.bd520e14.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Category extends React.Component{\r\n\r\n    handleSelect = (evt) =>{\r\n        this.props.handleChange(evt);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id = \"categoryDiv\" align = \"center\">\r\n                <form>\r\n                    <label > \r\n                        <h4>\r\n                            Select the type of input that you would like to generate\r\n                        </h4>\r\n                    </label> \r\n                    <select id = \"inputOptions\" onChange = {this.handleSelect}>\r\n                        <option value = \"array\" >  Array  </option>\r\n                        {/*} <option value = \"string\">  String </option>{*/}\r\n                    </select>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Category;","import React, {Component} from \"react\";\r\n\r\nclass SortRepeatArray extends React.Component{\r\n    callSortChange = (evt) =>{\r\n        this.props.handleSortChange(evt);\r\n    }\r\n\r\n    callRepeatedChange = (evt) =>{\r\n        this.props.handleRepeatedChange(evt);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <label>\r\n                    <h4>\r\n                        Sort the array? Allow repeated values?\r\n                    </h4>\r\n                        Sort?\r\n                    </label>\r\n        \r\n                    <input type = \"checkbox\" onClick =  {this.callSortChange} />\r\n                    <labe> Allow repeated values?</labe>\r\n                    <input type = \"checkbox\" onClick =  {this.callRepeatedChange} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SortRepeatArray;","import React, {Component} from \"react\";\r\nimport SortRepeatArray from \"./sortRepeatArray\";\r\n\r\nclass IntArray extends React.Component{\r\n    callInputChange = (evt) =>{\r\n        this.props.handleInputChange(evt);\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>Type the range of numbers from -1000000000 to 1000000000\r\n                    <br></br>\r\n                        If range is way too small for the size of the array and no repeated values are allowed,\r\n                        the range will increase automatically\r\n                </h4>                                               \r\n                <label for = \"minInput\"> Min </label>\r\n                    <input \r\n                        name = 'minIn' \r\n                        min = '-1000000000'\r\n                        max =  '1000000000'\r\n                        id =  \"minInput\" \r\n                        onChange = {this.callInputChange}\r\n                        type = \"number\"\r\n                    /> \r\n\r\n                <label for = \"maxInput\"> Max </label>\r\n                    <input \r\n                        name = 'maxIn'\r\n                        min = '-1000000000'\r\n                        max =  '1000000000' \r\n                        id = 'maxInput'  \r\n                        onChange = {this.callInputChange} \r\n                        type = \"number\"\r\n                    /> \r\n                    \r\n                <SortRepeatArray\r\n                    handleSortChange = {this.props.handleSortChange}\r\n                    handleRepeatedChange = {this.props.handleRepeatedChange}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IntArray;","import React,{Component} from \"react\";\r\nimport SortRepeatArray from \"./sortRepeatArray\";\r\n\r\nclass FloatArray extends React.Component{\r\n    callInputChange = (evt) =>{\r\n        this.props.handleInputChange(evt);\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>Type the range of numbers from -1000000000 to 1000000000\r\n                    <br></br>\r\n                        If range is way too small for the size of the array and no repeated values are allowed,\r\n                        the range will increase automatically\r\n                </h4>  \r\n                <label for = \"minInput\"> Min </label>\r\n                    <input \r\n                        name = 'minIn' \r\n                        min = '-1000000000'\r\n                        max =  '1000000000'\r\n                        id =  \"minInput\" \r\n                        step = 'any'\r\n                        onChange = {this.callInputChange}\r\n                        type = \"number\"\r\n                    /> \r\n\r\n                <label for = \"maxInput\"> Max </label>\r\n                    <input \r\n                        name = 'maxIn'\r\n                        min = '-1000000000'\r\n                        max =  '1000000000' \r\n                        id = 'maxInput'  \r\n                        step = 'any'\r\n                        onChange = {this.callInputChange} \r\n                        type = \"number\"\r\n                    /> \r\n                <label> \r\n                    <h4>\r\n                        Amount of decimals (from 1 to 10)\r\n                    </h4>\r\n                </label>\r\n                    <input\r\n                        name = \"decimals\"\r\n                        min = \"1\"\r\n                        max = \"10\"\r\n                        onChange = {this.callInputChange}\r\n                    />\r\n                <SortRepeatArray\r\n                    handleSortChange = {this.props.handleSortChange}\r\n                    handleRepeatedChange = {this.props.handleRepeatedChange}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FloatArray;","import React, {Component} from \"react\";\r\n\r\nclass CharStringOption extends React.Component{\r\n    callLower = (evt) =>{\r\n        this.props.handleLower(evt);\r\n    }\r\n    callUpper = (evt) =>{\r\n        this.props.handleUpper(evt);\r\n    }\r\n    callSpecial = (evt) =>{\r\n        this.props.handleSpecial(evt);\r\n    }\r\n    render(){\r\n  \r\n        return(\r\n            <div>\r\n                <label>Lower Case?</label>\r\n                    <input \r\n                        type = 'checkbox' \r\n                        onChange = {this.callLower}\r\n                    />\r\n\r\n                <label> Upper Case?</label>\r\n                    <input \r\n                        type = 'checkbox' \r\n                        onChange = {this.callUpper}\r\n                    />\r\n\r\n                <label> Special Characters? </label>\r\n                    <input \r\n                        type = 'checkbox' \r\n                        onChange = {this.callSpecial}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharStringOption;","import React, {Component} from \"react\";\r\nimport CharStringOption from \"./charStringOption\";\r\n\r\nclass StringArray extends React.Component{\r\n    callInputChange = (evt) =>{\r\n        this.props.handleInputChange(evt);\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                \r\n                <label>string length 1 to 1000 </label>\r\n                    <input \r\n                        name = 'strLength'\r\n                        type = \"number\"\r\n                        min = '0'\r\n                        max = '1000'\r\n                        onChange = {this.callInputChange}\r\n                    />\r\n\r\n\r\n                <CharStringOption \r\n                        handleLower = {this.props.handleLower}\r\n                        handleUpper = {this.props.handleUpper}\r\n                        handleSpecial = {this.props.handleSpecial}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StringArray;","import React, {Component} from \"react\";\r\nimport CharStringOption from \"./charStringOption\";\r\n\r\nclass CharArray extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <label> Numbers? </label>\r\n                    <input \r\n                        type = 'checkbox' \r\n                        onChange = {this.props.handleNum}\r\n                    />\r\n                    <CharStringOption \r\n                        handleLower = {this.props.handleLower}\r\n                        handleUpper = {this.props.handleUpper}\r\n                        handleSpecial = {this.props.handleSpecial}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharArray;","import React, {Component} from \"react\";\r\nimport IntArray from \"./arrayCategory/intArray\";\r\nimport FloatArray from \"./arrayCategory/floatArray\";\r\nimport StringArray from \"./arrayCategory/stringArray\";\r\nimport CharArray from \"./arrayCategory/charArray\";\r\n\r\nclass ArrayCategory extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            dataType : \"int\",\r\n            arraySize : 1,\r\n            minIn : -1000000000,\r\n            maxIn :  1000000000,\r\n            sort : false,\r\n            repeated: false,\r\n            decimals : 1,\r\n            lowerCase : false,\r\n            upperCase : false,\r\n            numbers : false,\r\n            special : false,\r\n            strLength : 1,\r\n            currentView :<IntArray\r\n                handleInputChange = {this.handleInputChange}\r\n                handleSortChange = {this.handleSortChange}\r\n                handleRepeatedChange = {this.handleRepeatedChange}\r\n            />\r\n        };\r\n    }\r\n\r\n    handleDataTypeChange = (evt) => {\r\n\r\n        this.setState({ dataType: evt.target.value});\r\n        switch(evt.target.value){\r\n            case 'int':\r\n                this.setState({currentView :<IntArray\r\n                    handleInputChange = {this.handleInputChange}\r\n                    handleSortChange = {this.handleSortChange}\r\n                    handleRepeatedChange = {this.handleRepeatedChange}\r\n                />, minIn : -1000000000,\r\n                    maxIn :  1000000000,\r\n                    sort : false,\r\n                    repeated: false});\r\n            break;\r\n            case 'float':\r\n                this.setState({currentView :<FloatArray\r\n                    handleInputChange = {this.handleInputChange}\r\n                    handleSortChange = {this.handleSortChange}\r\n                    handleRepeatedChange = {this.handleRepeatedChange}\r\n                />, minIn : -1000000000,\r\n                    maxIn :  1000000000,\r\n                    sort : false,\r\n                    repeated: false,\r\n                    decimals : 1});\r\n            break;\r\n            case 'bool':\r\n                this.setState({currentView: null});\r\n            break;\r\n            case 'char':\r\n                this.setState({currentView:<CharArray\r\n                    handleNum = {this.handleNum}\r\n                    handleLower = {this.handleLower}\r\n                    handleUpper = {this.handleUpper}\r\n                    handleSpecial = {this.handleSpecial}\r\n                />, \r\n                lowerCase : false,\r\n                upperCase : false,\r\n                numbers : false,\r\n                special : false});\r\n\r\n            break;\r\n            case 'string':\r\n                this.setState({currentView:<StringArray\r\n                    handleInputChange = {this.handleInputChange}\r\n                    handleLower = {this.handleLower}\r\n                    handleUpper = {this.handleUpper}\r\n                    handleSpecial = {this.handleSpecial}\r\n                />,\r\n                lowerCase : false,\r\n                upperCase : false,\r\n                special : false,\r\n                strLength : 1});\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    handleInputChange = (evt) =>{\r\n        this.setState({[evt.target.name] : evt.target.value});\r\n    }\r\n\r\n    handleSortChange = () =>{\r\n        this.setState({sort : !this.state.sort});\r\n    }\r\n\r\n    handleRepeatedChange = () =>{\r\n        this.setState({repeated : !this.state.repeated});\r\n    }\r\n\r\n    handleLower = () =>{\r\n        this.setState({lowerCase : !this.state.lowerCase});\r\n    }\r\n\r\n    handleUpper = () => {\r\n        this.setState({upperCase : !this.state.upperCase});\r\n    }\r\n\r\n    handleNum = () =>{\r\n        this.setState({numbers : !this.state.numbers});\r\n    }\r\n\r\n    handleSpecial = () =>{\r\n        this.setState({special : !this.state.special});\r\n    }\r\n\r\n    callArrayGenerator = (evt) => {\r\n        evt.preventDefault();\r\n        this.props.generate(\r\n            this.state.dataType,\r\n            this.state.arraySize, \r\n            this.state.minIn,\r\n            this.state.maxIn, \r\n            this.state.sort,\r\n            this.state.repeated,\r\n            this.state.decimals,\r\n            this.state.lowerCase,\r\n            this.state.upperCase,\r\n            this.state.numbers,\r\n            this.state.special,\r\n            this.state.strLength);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div align = \"center\">\r\n                <form>\r\n                    <label for = \"arrayDataType\">\r\n                        <h4>\r\n                            Select the data type \r\n                        </h4>   \r\n                    </label>\r\n                    <select id = \"arrayDataType\" onChange ={this.handleDataTypeChange}>\r\n                        <option value = \"int\"   > int   </option>\r\n                        <option value = \"float\"> float</option>\r\n                        <option value = \"bool\"  > bool  </option>\r\n                        <option value = \"char\"  > char  </option>\r\n                        <option value = \"string\"> string</option>\r\n                    </select>\r\n\r\n                    <label for = \"arraySize\">\r\n                        <h4>\r\n                            Select the amount of values that this array will contain from 1 to 10000. \r\n                            If limit is <u>exceeded the length of the array will be set to 10000.</u>\r\n                        </h4>\r\n                    </label>\r\n                    <input \r\n                        id = \"arraySize\"\r\n                        name = \"arraySize\"\r\n                        type =\"number\"   \r\n                        min = '1'\r\n                        max = '10000'\r\n                        onChange = {this.handleInputChange}\r\n                    />\r\n                    <br></br>\r\n                    <br></br>\r\n                    {this.state.currentView}\r\n\r\n                    <button id = 'buttonGenerate' onClick = {this.callArrayGenerator}>Generate Random Test Case</button>\r\n                    \r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayCategory;","import React, {Component} from \"react\";\r\n\r\nclass StringCategory extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StringCategory;","//https://chancejs.com/\r\nvar chance = require('chance').Chance();\r\n//\r\n\r\nexport const arrayGeneration = (dataType, arraySize, minIn, maxIn, sorted, repeated,decimals,lower,upper,number,special, strLength) => {\r\n    let testCase =  \"\";\r\n    let charPool = '';\r\n\r\n    if(lower)\r\n        charPool += 'abcdefghijklmnopqrstuvwxyz';\r\n\r\n    if(upper)\r\n        charPool += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n    if(number)\r\n        charPool += '0123456789';\r\n    \r\n    if(special)\r\n        charPool += '!@#$%^&*()';\r\n\r\n    if(charPool == ''){\r\n        charPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\r\n    }\r\n    \r\n    charPool = String(charPool);\r\n\r\n    if(arraySize < 1) arraySize = 1;\r\n    \r\n    if( arraySize > 10000) arraySize = 10000;\r\n\r\n    if(decimals < 1) decimals = 1;\r\n\r\n    if( decimals > 10) decimals = 10;\r\n\r\n    if( strLength < 1) strLength = 1;\r\n\r\n    if( strLength > 1000) strLength = 1000;\r\n    \r\n    if( minIn < -1000000000) minIn = -1000000000;\r\n\r\n    if( minIn > 1000000000) minIn = 1000000000;\r\n    \r\n    if( maxIn < -1000000000) maxIn = -1000000000;\r\n    \r\n    if ( maxIn > 1000000000) maxIn = 1000000000;\r\n    \r\n    if ( minIn > maxIn){\r\n\r\n        let temp = maxIn;\r\n        maxIn = minIn;\r\n        minIn = temp;\r\n    \r\n    }\r\n\r\n    testCase = generateArray(dataType, arraySize, minIn, maxIn,sorted,repeated,decimals,charPool,strLength);\r\n\r\n    \r\n    return testCase;\r\n}\r\n\r\n\r\nlet generateArray = (dataType,arraySize, minIn, maxIn,sorted, repeated,decimals, charPool,strLength) => {\r\n\r\n    let temp = new Array(arraySize);\r\n    let seen = new Array(arraySize);\r\n    let minMaxTurn = false;\r\n    \r\n    for( let i = 0; i < arraySize; i++){\r\n        \r\n        let rand = choiceGenerator(dataType,decimals,minIn,maxIn, charPool,strLength) ;\r\n        \r\n        if((!repeated) && (dataType == 'float' || dataType == 'int')){\r\n\r\n            if( seen.includes(rand) ){\r\n                let limit = 10000;\r\n\r\n                while(seen.includes(rand) && limit > 0){\r\n\r\n                    rand = choiceGenerator(dataType,decimals,minIn,maxIn,charPool, strLength);\r\n                    limit--;\r\n                    \r\n                }\r\n                if(seen.includes(rand)){\r\n                    minIn--;\r\n                    maxIn++;\r\n\r\n                    if(minMaxTurn) \r\n                        rand = minIn;\r\n\r\n                    else   \r\n                        rand = maxIn;\r\n\r\n                    minMaxTurn = !minMaxTurn;\r\n\r\n                }\r\n            }\r\n            seen[i] = rand;\r\n\r\n\r\n\r\n        }else if(dataType == 'char'){\r\n\r\n            if(!charPool.includes(rand)){\r\n                while(!charPool.includes(rand)){\r\n                    rand = choiceGenerator(dataType,decimals,minIn,maxIn,charPool, strLength);\r\n                }\r\n            }\r\n\r\n        }else if(dataType == 'string'){\r\n\r\n            let found = true;\r\n            while(found){\r\n                let changed = false;\r\n                for(let i = 0; i < rand.length; i++){\r\n                    if( charPool.indexOf(rand[i]) == -1){\r\n                        rand = choiceGenerator(dataType, decimals,minIn,maxIn,charPool, strLength);\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!changed){\r\n                    found = false;\r\n                }\r\n            }\r\n\r\n        }\r\n        temp[i] = rand;\r\n\r\n    }\r\n\r\n    if(sorted)\r\n        temp = temp.sort(function(a, b){return a-b});\r\n    \r\n    let testCase = temp.join();\r\n\r\n    if( dataType == 'char')\r\n        return fixCharTest(testCase);\r\n    if(dataType == 'string')\r\n        return fixStringTest(testCase,strLength);\r\n    \r\n    return testCase;\r\n\r\n}\r\n\r\nlet choiceGenerator = (dataType, decimals, minIn, maxIn, charPool, strLength) =>{\r\n\r\n    if(dataType == 'int'){\r\n        \r\n        return chance.integer({ min: parseInt(minIn), max: parseInt(maxIn) });\r\n\r\n    }else if ( dataType == 'float'){\r\n\r\n        return chance.floating({ min: parseFloat(minIn), max: parseFloat(maxIn), fixed: decimals });\r\n    \r\n    }else if ( dataType == 'bool'){\r\n\r\n        return chance.bool();\r\n\r\n    }else if ( dataType == 'char'){\r\n     \r\n        return chance.character({pool : charPool});\r\n\r\n    }else{\r\n        \r\n        return chance.string({ pool: charPool,length : strLength});\r\n    }\r\n\r\n}\r\n\r\nlet fixCharTest = (test) =>{\r\n    let temp = \"\";\r\n    for(let i = 0; i < test.length; i++){\r\n\r\n        if( i % 2 == 0){\r\n            temp += \"\\'\" + test[i] + \"\\'\"\r\n        }else{\r\n            temp += test[i];\r\n        }\r\n\r\n    }\r\n    return temp;\r\n}\r\n\r\nlet fixStringTest = (test, len) =>{\r\n    let temp = \"\";\r\n    let count = 0;\r\n    for(let i = 0; i < test.length;i++, count++){\r\n        if(count % len  == 0){\r\n            temp += '\\\"' + test[i];\r\n        }else if(count % len == len - 1){\r\n            temp += test[i] + '\\\"';\r\n            count = -2;\r\n        }else{\r\n            temp += test[i];\r\n        }\r\n    }\r\n    if(temp[temp.length -1] != '\\\"'){\r\n        temp += \"\\\"\";\r\n    }\r\n    return temp;\r\n}\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport Category from \"./category\";\r\nimport ArrayCategory from \"./arrayCategory\";\r\nimport StringCategory from \"./stringCategory\";\r\nimport {arrayGeneration} from \"./testCaseGenerator\";\r\nimport \"./index.css\";\r\nclass App extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            currentCategory : <ArrayCategory\r\n                generate = {this.generateTestCase}\r\n            />,\r\n            testcase : \"\"\r\n        };\r\n    }\r\n\r\n    generateTestCase = (dataType, arraySize, minIn, maxIn,sorted, repeated, decimals, lower, upper, numbers,special, strLength) => {\r\n        \r\n        let temp = arrayGeneration(\r\n            dataType,\r\n            arraySize,\r\n            minIn,\r\n            maxIn,\r\n            sorted, \r\n            repeated,\r\n            decimals,\r\n            lower,\r\n            upper,\r\n            numbers,\r\n            special,\r\n            strLength\r\n        );\r\n\r\n        this.setState({testcase : temp});\r\n        \r\n    }\r\n\r\n    handleChange = (evt) =>{\r\n        let temp = null;\r\n        switch(evt.target.value){\r\n            case 'array':\r\n                temp = <ArrayCategory\r\n                    generate = {this.arrayGenerator}\r\n                />;\r\n            break;\r\n            case 'string':\r\n                temp = <StringCategory/>\r\n            break;\r\n        }\r\n        this.setState({currentCategory: temp});\r\n    }\r\n\r\n    copyToClipboard = () =>{\r\n        //code taken from https://www.arclab.com/en/kb/htmlcss/how-to-copy-text-from-html-element-to-clipboard.html\r\n\r\n        var r = document.createRange();\r\n        r.selectNode(document.getElementById('testCase'));\r\n        window.getSelection().removeAllRanges();\r\n        window.getSelection().addRange(r);\r\n        document.execCommand('copy');\r\n        window.getSelection().removeAllRanges();\r\n\r\n        //\r\n        alert('Test case has been copied to clipboard :).');\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div align = \"center\">\r\n                This app is under development. Expect more features soon :)\r\n                <Category\r\n                    handleChange = {this.handleChange}\r\n                />  \r\n                {this.state.currentCategory}\r\n                <br></br>\r\n                <button onClick = {this.copyToClipboard}> Copy </button>\r\n                <br></br>\r\n                <br></br>\r\n                <p id = \"testCase\">\r\n                    [{this.state.testcase}]\r\n                </p>\r\n                <br></br>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}