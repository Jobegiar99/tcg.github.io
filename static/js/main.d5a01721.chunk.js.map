{"version":3,"sources":["category.js","arrayCategory.js","stringCategory.js","testCaseGenerator.js","index.js"],"names":["Category","handleSelect","evt","props","handleChange","id","align","onChange","this","value","React","Component","ArrayCategory","handleDataTypeChange","setState","dataType","target","decimalVisible","visibility","charStringVisible","sortRepeated","generateNumbers","handleInputChange","name","handleSortChange","sort","state","handleRepeatedChange","repeated","handleLower","lowerCase","handleUpper","upperCase","handleNum","numbers","handleSpecial","special","callArrayGenerator","preventDefault","generate","arraySize","minIn","maxIn","decimals","strLength","for","type","min","max","style","onClick","StringCategory","chance","require","Chance","generateArray","sorted","charPool","temp","Array","seen","minMaxTurn","i","rand","choiceGenerator","includes","found","changed","length","indexOf","limit","a","b","testCase","join","fixCharTest","fixStringTest","integer","parseInt","floating","parseFloat","fixed","bool","character","pool","string","test","len","count","App","generateTestCase","lower","upper","number","String","arrayGeneration","testcase","arrayGenerator","currentCategory","copyToClipboard","r","document","createRange","selectNode","getElementById","window","getSelection","removeAllRanges","addRange","execCommand","alert","ReactDOM","render"],"mappings":"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","file":"static/js/main.d5a01721.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Category extends React.Component{\r\n\r\n    handleSelect = (evt) =>{\r\n        this.props.handleChange(evt);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id = \"categoryDiv\" align = \"center\">\r\n                <form>\r\n                    <label > \r\n                        <h4>\r\n                            Select the type of input that you would like to generate\r\n                        </h4>\r\n                    </label> \r\n                    <select id = \"inputOptions\" onChange = {this.handleSelect}>\r\n                        <option value = \"array\" >  Array  </option>\r\n                        {/*} <option value = \"string\">  String </option>{*/}\r\n                    </select>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Category;","import React, {Component} from \"react\";\r\n\r\nclass ArrayCategory extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            dataType : \"int\",\r\n            arraySize : 1,\r\n            minIn : -1000000000,\r\n            maxIn :  1000000000,\r\n            sort : false,\r\n            repeated: false,\r\n            decimals : 1,\r\n            lowerCase : false,\r\n            upperCase : false,\r\n            numbers : false,\r\n            special : false,\r\n            strLength : 1,\r\n            decimalVisible : { visibility : 'hidden'},\r\n            charStringVisible : {visibility :'hidden'},\r\n            sortRepeated : {visibility : 'visible'},\r\n            generateNumbers : {visibility : 'hidden'}\r\n        };\r\n    }\r\n\r\n    handleDataTypeChange = (evt) => {\r\n\r\n        this.setState({ dataType: evt.target.value});\r\n\r\n        if(evt.target.value == 'int'){\r\n            this.setState({\r\n                decimalVisible : {visibility : 'hidden'}, \r\n                charStringVisible : {visibility: 'hidden'},\r\n                sortRepeated : {visibility : 'visible'},\r\n                generateNumbers : {visibility : 'hidden'}\r\n            });\r\n        }else if ( evt.target.value == 'float'){\r\n            this.setState({\r\n                decimalVisible : {visibility : 'visible'}, \r\n                charStringVisible : {visibility: 'hidden'},\r\n                sortRepeated : {visibility : 'visible'},\r\n                generateNumbers : {visibility : 'hidden'}\r\n            });\r\n        }else if ( (evt.target.value == 'char') || (evt.target.value == 'string') ){\r\n            this.setState({\r\n                decimalVisible : {visibility : 'hidden'}, \r\n                charStringVisible : {visibility: 'visible'},\r\n                sortRepeated : {visibility : 'hidden'},\r\n                generateNumbers : {visibility : (evt.target.value == 'char') ? 'visible' : 'hidden'}\r\n                \r\n            });\r\n        }else{\r\n            this.setState({\r\n                decimalVisible : {visibility : 'hidden'}, \r\n                charStringVisible : {visibility: 'hidden'},\r\n                sortRepeated : {visibility : 'hidden'},\r\n                generateNumbers : {visibility : 'hidden'}\r\n            });\r\n        }\r\n    }\r\n\r\n    handleInputChange = (evt) =>{\r\n        this.setState({[evt.target.name] : evt.target.value});\r\n    }\r\n\r\n    handleSortChange = () =>{\r\n        this.setState({sort : !this.state.sort});\r\n    }\r\n\r\n    handleRepeatedChange = () =>{\r\n        this.setState({repeated : !this.state.repeated});\r\n    }\r\n\r\n    handleLower = () =>{\r\n        this.setState({lowerCase : !this.state.lowerCase});\r\n    }\r\n\r\n    handleUpper = () => {\r\n        this.setState({upperCase : !this.state.upperCase});\r\n    }\r\n\r\n    handleNum = () =>{\r\n        this.setState({numbers : !this.state.numbers});\r\n    }\r\n\r\n    handleSpecial = () =>{\r\n        this.setState({special : !this.state.special});\r\n    }\r\n\r\n    callArrayGenerator = (evt) => {\r\n        evt.preventDefault();\r\n        this.props.generate(\r\n            this.state.dataType,\r\n            this.state.arraySize, \r\n            this.state.minIn,\r\n            this.state.maxIn, \r\n            this.state.sort,\r\n            this.state.repeated,\r\n            this.state.decimals,\r\n            this.state.lowerCase,\r\n            this.state.upperCase,\r\n            this.state.numbers,\r\n            this.state.special,\r\n            this.state.strLength);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div align = \"center\">\r\n                <form>\r\n                    <label for = \"arrayDataType\">\r\n                        <h4>\r\n                            Select the data type \r\n                        </h4>   \r\n                    </label>\r\n                    <select id = \"arrayDataType\" onChange ={this.handleDataTypeChange}>\r\n                        <option value = \"int\"   > int   </option>\r\n                        <option value = \"float\"> float</option>\r\n                        <option value = \"bool\"  > bool  </option>\r\n                        <option value = \"char\"  > char  </option>\r\n                        <option value = \"string\"> string</option>\r\n                    </select>\r\n\r\n                    <label for = \"arraySize\">\r\n                        <h4>\r\n                            Select the amount of values that this array will contain from 1 to 10000. \r\n                            If limit is <u>exceeded the length of the array will be set to 10000.</u>\r\n                        </h4>\r\n                    </label>\r\n                    <input \r\n                        id = \"arraySize\"\r\n                        name = \"arraySize\"\r\n                        type =\"number\"   \r\n                        min = '1'\r\n                        max = '10000'\r\n                        onChange = {this.handleInputChange}\r\n                    />\r\n                    <div style = {this.state.sortRepeated}>\r\n                        <h4>Type the range of numbers from -1000000000 to 1000000000\r\n                            <br></br>\r\n                            If range is way too small for the size of the array and no repeated values are allowed,\r\n                            the range will increase automatically\r\n                        </h4>                                               \r\n                        <label for = \"minInput\"> Min </label>\r\n                        <input \r\n                            name = 'minIn' \r\n                            min = '-1000000000'\r\n                            max =  '1000000000'\r\n                            id =  \"minInput\" \r\n                            onChange = {this.handleInputChange}\r\n                            type = \"number\"\r\n                        /> \r\n\r\n                        <label for = \"maxInput\"> Max </label>\r\n                        <input \r\n                            name = 'maxIn'\r\n                            min = '-1000000000'\r\n                            max =  '1000000000' \r\n                            id = 'maxInput'  \r\n                            onChange = {this.handleInputChange} \r\n                            type = \"number\"\r\n                        /> \r\n                    </div>\r\n                    <div style = {this.state.decimalVisible}>\r\n                        <label> \r\n                            <h4>\r\n                                Amount of decimals (from 1 to 10)\r\n                            </h4>\r\n                        </label>\r\n                        <input\r\n                            name = \"decimals\"\r\n                            min = \"1\"\r\n                            max = \"10\"\r\n                            onChange = {this.handleInputChange}\r\n                        />\r\n                    </div>\r\n                    <div style = {this.state.sortRepeated}>\r\n                        <label>\r\n                            <h4>\r\n                                Sort the array? Allow repeated values?\r\n                            </h4>\r\n                            Sort?\r\n                        </label>\r\n        \r\n                        <input type = \"checkbox\" onClick =  {this.handleSortChange} />\r\n                        <labe> Allow repeated values?</labe>\r\n                        <input type = \"checkbox\" onClick =  {this.handleRepeatedChange} />\r\n                    </div>\r\n                    <div style = {this.state.charStringVisible}>\r\n                        <label>\r\n                            <h4>\r\n                                string and char options\r\n                            </h4>\r\n                            Lower Case?\r\n                        </label>\r\n                        <input type = 'checkbox' onChange = {this.handleLower}/>\r\n\r\n                        <label> Upper Case?</label>\r\n                        <input type = 'checkbox' onChange = {this.handleUpper}/>\r\n\r\n                        <div style = {this.state.generateNumbers}>\r\n                            <label> Numbers? </label>\r\n                            <input type = 'checkbox' onChange = {this.handleNum}/>\r\n                        </div>\r\n\r\n                        <label> Special Characters? </label>\r\n                        <input type = 'checkbox' onChange = {this.handleSpecial}/>\r\n                        <br></br>\r\n                        <br></br> \r\n                        <label>string length 1 to 1000 </label>\r\n                        <input \r\n                            name = 'strLength'\r\n                            type = \"number\"\r\n                            min = '1'\r\n                            max = '1000'\r\n                            onChange = {this.handleInputChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <br></br>\r\n                    <button id = 'buttonGenerate' onClick = {this.callArrayGenerator}>Generate Random Test Case</button>\r\n                    \r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayCategory;","import React, {Component} from \"react\";\r\n\r\nclass StringCategory extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StringCategory;","//https://chancejs.com/\r\nvar chance = require('chance').Chance();\r\n//\r\n\r\nexport const arrayGeneration = (dataType, arraySize, minIn, maxIn, sorted, repeated,decimals,lower,upper,number,special, strLength) => {\r\n    let testCase =  \"\";\r\n    let charPool = '';\r\n\r\n    if(lower)\r\n        charPool += 'abcdefghijklmnopqrstuvwxyz';\r\n\r\n    if(upper)\r\n        charPool += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n    if(number)\r\n        charPool += '0123456789';\r\n    \r\n    if(special)\r\n        charPool += '!@#$%^&*()';\r\n\r\n    if(charPool == ''){\r\n        charPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';\r\n    }\r\n    \r\n    charPool = String(charPool);\r\n\r\n    if(arraySize < 1) arraySize = 1;\r\n    \r\n    if( arraySize > 10000) arraySize = 10000;\r\n\r\n    if(decimals < 1) decimals = 1;\r\n\r\n    if( decimals > 10) decimals = 10;\r\n\r\n    if( strLength < 1) strLength = 1;\r\n\r\n    if( strLength > 1000) strLength = 1000;\r\n    \r\n    if( minIn < -1000000000) minIn = -1000000000;\r\n\r\n    if( minIn > 1000000000) minIn = 1000000000;\r\n    \r\n    if( maxIn < -1000000000) maxIn = -1000000000;\r\n    \r\n    if ( maxIn > 1000000000) maxIn = 1000000000;\r\n    \r\n    if ( minIn > maxIn){\r\n\r\n        let temp = maxIn;\r\n        maxIn = minIn;\r\n        minIn = temp;\r\n    \r\n    }\r\n\r\n    testCase = generateArray(dataType, arraySize, minIn, maxIn,sorted,repeated,decimals,charPool,strLength);\r\n\r\n    \r\n    return testCase;\r\n}\r\n\r\n\r\nlet generateArray = (dataType,arraySize, minIn, maxIn,sorted, repeated,decimals, charPool,strLength) => {\r\n\r\n    let temp = new Array(arraySize);\r\n    let seen = new Array(arraySize);\r\n    let minMaxTurn = false;\r\n    \r\n    for( let i = 0; i < arraySize; i++){\r\n        \r\n        let rand = choiceGenerator(dataType,decimals,minIn,maxIn, charPool,strLength) ;\r\n        \r\n        if((!repeated) && (dataType == 'float' || dataType == 'int')){\r\n\r\n            if( seen.includes(rand) ){\r\n                let limit = 10000;\r\n\r\n                while(seen.includes(rand) && limit > 0){\r\n\r\n                    rand = choiceGenerator(dataType,decimals,minIn,maxIn,charPool, strLength);\r\n                    limit--;\r\n                    \r\n                }\r\n                if(seen.includes(rand)){\r\n                    minIn--;\r\n                    maxIn++;\r\n\r\n                    if(minMaxTurn) \r\n                        rand = minIn;\r\n\r\n                    else   \r\n                        rand = maxIn;\r\n\r\n                    minMaxTurn = !minMaxTurn;\r\n\r\n                }\r\n            }\r\n            seen[i] = rand;\r\n\r\n\r\n\r\n        }else if(dataType == 'char'){\r\n\r\n            if(!charPool.includes(rand)){\r\n                while(!charPool.includes(rand)){\r\n                    rand = choiceGenerator(dataType,decimals,minIn,maxIn,charPool, strLength);\r\n                }\r\n            }\r\n\r\n        }else if(dataType == 'string'){\r\n\r\n            let found = true;\r\n            while(found){\r\n                let changed = false;\r\n                for(let i = 0; i < rand.length; i++){\r\n                    if( charPool.indexOf(rand[i]) == -1){\r\n                        rand = choiceGenerator(dataType, decimals,minIn,maxIn,charPool, strLength);\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!changed){\r\n                    found = false;\r\n                }\r\n            }\r\n\r\n        }\r\n        temp[i] = rand;\r\n\r\n    }\r\n\r\n    if(sorted)\r\n        temp = temp.sort(function(a, b){return a-b});\r\n    \r\n    let testCase = temp.join();\r\n\r\n    if( dataType == 'char')\r\n        return fixCharTest(testCase);\r\n    if(dataType == 'string')\r\n        return fixStringTest(testCase,strLength);\r\n    \r\n    return testCase;\r\n\r\n}\r\n\r\nlet choiceGenerator = (dataType, decimals, minIn, maxIn, charPool, strLength) =>{\r\n\r\n    if(dataType == 'int'){\r\n        \r\n        return chance.integer({ min: parseInt(minIn), max: parseInt(maxIn) });\r\n\r\n    }else if ( dataType == 'float'){\r\n\r\n        return chance.floating({ min: parseFloat(minIn), max: parseFloat(maxIn), fixed: decimals });\r\n    \r\n    }else if ( dataType == 'bool'){\r\n\r\n        return chance.bool();\r\n\r\n    }else if ( dataType == 'char'){\r\n     \r\n        return chance.character({pool : charPool});\r\n\r\n    }else{\r\n        \r\n        return chance.string({ pool: charPool,length : strLength});\r\n    }\r\n\r\n}\r\n\r\nlet fixCharTest = (test) =>{\r\n    let temp = \"\";\r\n    for(let i = 0; i < test.length; i++){\r\n\r\n        if( i % 2 == 0){\r\n            temp += \"\\'\" + test[i] + \"\\'\"\r\n        }else{\r\n            temp += test[i];\r\n        }\r\n\r\n    }\r\n    return temp;\r\n}\r\n\r\nlet fixStringTest = (test, len) =>{\r\n    let temp = \"\";\r\n    let count = 0;\r\n    for(let i = 0; i < test.length;i++, count++){\r\n        if(count % len  == 0){\r\n            temp += '\\\"' + test[i];\r\n        }else if(count % len == len - 1){\r\n            temp += test[i] + '\\\"';\r\n            count = -2;\r\n        }else{\r\n            temp += test[i];\r\n        }\r\n    }\r\n    if(temp[temp.length -1] != '\\\"'){\r\n        temp += \"\\\"\";\r\n    }\r\n    return temp;\r\n}\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport Category from \"./category\";\r\nimport ArrayCategory from \"./arrayCategory\";\r\nimport StringCategory from \"./stringCategory\";\r\nimport {arrayGeneration} from \"./testCaseGenerator\";\r\nimport \"./index.css\";\r\nclass App extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            currentCategory : <ArrayCategory\r\n                generate = {this.generateTestCase}\r\n            />,\r\n            testcase : \"\"\r\n        };\r\n    }\r\n\r\n    generateTestCase = (dataType, arraySize, minIn, maxIn,sorted, repeated, decimals, lower, upper, numbers,special, strLength) => {\r\n        \r\n        let temp = arrayGeneration(\r\n            dataType,\r\n            arraySize,\r\n            minIn,\r\n            maxIn,\r\n            sorted, \r\n            repeated,\r\n            decimals,\r\n            lower,\r\n            upper,\r\n            numbers,\r\n            special,\r\n            strLength\r\n        );\r\n\r\n        this.setState({testcase : temp});\r\n        \r\n    }\r\n\r\n    handleChange = (evt) =>{\r\n        let temp = null;\r\n        switch(evt.target.value){\r\n            case 'array':\r\n                temp = <ArrayCategory\r\n                    generate = {this.arrayGenerator}\r\n                />;\r\n            break;\r\n            case 'string':\r\n                temp = <StringCategory/>\r\n            break;\r\n        }\r\n        this.setState({currentCategory: temp});\r\n    }\r\n\r\n    copyToClipboard = () =>{\r\n        //code taken from https://www.arclab.com/en/kb/htmlcss/how-to-copy-text-from-html-element-to-clipboard.html\r\n\r\n        var r = document.createRange();\r\n        r.selectNode(document.getElementById('testCase'));\r\n        window.getSelection().removeAllRanges();\r\n        window.getSelection().addRange(r);\r\n        document.execCommand('copy');\r\n        window.getSelection().removeAllRanges();\r\n\r\n        //\r\n        alert('Test case has been copied to clipboard :).');\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div align = \"center\">\r\n                This app is under development. Expect more features soon :)\r\n                <Category\r\n                    handleChange = {this.handleChange}\r\n                />  \r\n                {this.state.currentCategory}\r\n                <br></br>\r\n                <button onClick = {this.copyToClipboard}> Copy </button>\r\n                <br></br>\r\n                <br></br>\r\n                <p id = \"testCase\">\r\n                    [{this.state.testcase}]\r\n                </p>\r\n                <br></br>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}