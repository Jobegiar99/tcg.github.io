{"version":3,"sources":["ui/array/arrayDataType.js","ui/array/arrayLenRange.js","ui/array/arrInput.js","ui/array/arrayExtras.js","ui/array/arrayTestCaseGenerator.js","ui/array/arrayGeneration.js","ui/array/array.js","ui/mainView.js","index.js"],"names":["ArrayDataType","handleButtonClick","evt","preventDefault","props","handleDataType","target","name","className","id","xs","onClick","this","React","Component","ArrayLenRange","handleChange","isDecimal","onChange","min","type","placeholder","isNumber","isString","isCharString","ArrInput","arrayStringLength","arrLen","dataType","arrIncludeNumbers","arrIncludeLower","arrIncludeUpper","arrIncludeSpecial","isDecimals","arrDecimals","isIntFloat","arrMin","arrMax","arrSort","arrRepeated","isBool","ArrayExtras","isNum","value","opening","closure","chance","require","Chance","generateArray","arraySize","minIn","maxIn","sorted","repeated","decimals","charPool","strLength","temp","Array","seen","minMaxTurn","i","rand","choiceGenerator","includes","found","changed","length","indexOf","limit","sort","a","b","testCase","join","fixCharTest","fixStringTest","integer","parseInt","max","floating","parseFloat","fixed","bool","character","pool","string","test","len","count","arrayGeneration","lower","upper","number","special","console","log","String","ArrayGeneration","generateTestCase","setState","copyTestCase","textArea","select","document","execCommand","alert","state","readOnly","ref","textarea","daTy","valuer","MainView","currentView","App","align","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.538cb7a5.chunk.js","sourcesContent":["import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport \"../../css/array/arrayDataType.css\";\r\n\r\nclass ArrayDataType extends React.Component{\r\n    handleButtonClick = (evt) =>{\r\n        evt.preventDefault();\r\n        this.props.handleDataType(evt.target.name);\r\n    }\r\n    render(){\r\n        return(\r\n            <bs.Container className = \"justify-content-center\" id = \"arrayDataTypeContainer\" >\r\n                <h4 id = \"arrayDataTypeTitle\">Select a Data Type</h4>\r\n                \r\n                <bs.Row className =\"justify-content-center\">\r\n                \r\n                    <bs.Row>\r\n                        <bs.Navbar>\r\n                            <bs.Container className = \"justify-content-center\" id = \"arrayDataTypeButtons\">\r\n                \r\n                                <bs.Row className = \"arrayRow\" >\r\n                                    <bs.Col \r\n                                        xs = {2.4}\r\n                                        className = \"arrayCol\"\r\n                                    >\r\n                                        <bs.Button onClick = {this.handleButtonClick} name = \"char\" className = \"arrayButton\">\r\n                                            Char  \r\n                                        </bs.Button>                           \r\n                                    </bs.Col>\r\n                                    <bs.Col \r\n                                        xs = {2.4}\r\n                                        className = \"arrayCol\"\r\n                                    >\r\n                                        <bs.Button onClick = {this.handleButtonClick} name = \"string\" className = \"arrayButton\">\r\n                                            string\r\n                                        </bs.Button>                           \r\n                                    </bs.Col>\r\n                                    <bs.Col \r\n                                        xs = {2.4}\r\n                                        className = \"arrayCol\"\r\n                                    >\r\n                                        <bs.Button onClick = {this.handleButtonClick} name = \"int\" className = \"arrayButton\">\r\n                                            int   \r\n                                        </bs.Button>                           \r\n                                    </bs.Col>\r\n                                    <bs.Col \r\n                                        xs = {2.4}\r\n                                        className = \"arrayCol\"\r\n                                    >\r\n                                        <bs.Button onClick = {this.handleButtonClick} name = \"double\" className = \"arrayButton\">\r\n                                            double\r\n                                        </bs.Button>                           \r\n                                    </bs.Col>\r\n                                    <bs.Col \r\n                                        xs = {2.4}\r\n                                        className = \"arrayCol\"\r\n                                    >\r\n                                        <bs.Button onClick = {this.handleButtonClick} name = \"bool\" className = \"arrayButton\">\r\n                                            bool\r\n                                        </bs.Button>                           \r\n                                    </bs.Col>\r\n                                </bs.Row>\r\n                            </bs.Container>\r\n                        </bs.Navbar>\r\n                    </bs.Row>\r\n                </bs.Row>\r\n            </bs.Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayDataType;","import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport ArrayDataType from \"./arrayDataType.js\";\r\nimport \"../../css/array/arrayLenRange.css\";\r\n\r\nclass ArrayLenRange extends React.Component{\r\n\r\n    handleChange = (evt) =>{\r\n        this.props.handleChange(evt);\r\n    }\r\n\r\n    render(){\r\n        let isDecimal = \r\n            <bs.Col xs = {12} className = \"justify-content-center\">\r\n                <bs.FormLabel className = \"arrayFormLabel\">Decimals</bs.FormLabel>\r\n                <bs.FormControl onChange = {this.handleChange} className = \"arrayLenRangeFormControl\" name = \"arrDecimals\"  min = \"1\" type = \"number\" placeholder = \"Range: 1-20\"/>\r\n            </bs.Col>\r\n        let isNumber = \r\n            <bs.Row className = \"justify-content-center\">\r\n                <bs.Col xs = {12} className = \"justify-content-center\">\r\n                    <bs.FormLabel className = \"arrayFormLabel\">Min value</bs.FormLabel>\r\n                    <bs.FormControl onChange = {this.handleChange} className = \"arrayLenRangeFormControl\" name = \"arrMin\"  min = \"1\" type = \"number\" placeholder = \"Range: -1000000 to 1000000\"/>\r\n                </bs.Col>\r\n                <bs.Col xs = {12} className = \"justify-content-center\">\r\n                    <bs.FormLabel className = \"arrayFormLabel\">Max Value</bs.FormLabel>\r\n                    <bs.FormControl  onChange = {this.handleChange} className = \"arrayLenRangeFormControl\" name = \"arrMax\"  min = \"1\" type = \"number\" placeholder = \"Range: -1000000 to 1000000\"/>\r\n                </bs.Col>\r\n                {(this.props.isDecimal) ? isDecimal : null}\r\n                </bs.Row>;\r\n\r\n        let isString =\r\n            <bs.Col xs = {12}>\r\n                <bs.FormLabel className = \"arrayFormLabel\">Length of strings</bs.FormLabel>\r\n                <bs.FormControl className = \"arrayLenRangeFormControl\" name = \"arrayStringLength\" onChange = {this.handleChange} placeholder=\"1-1000000\" />\r\n            </bs.Col>\r\n\r\n        let isCharString =\r\n            <bs.Row>\r\n\r\n                {(this.props.isString)  ? isString : null}\r\n\r\n                <bs.Col xs = {3}>\r\n                    <bs.FormLabel className = \"arrayFormLabel\">Numbers</bs.FormLabel>\r\n                    <bs.FormCheck className = \"arrayLenRangeFormControl\" onChange = {this.handleChange} name = \"arrIncludeNumbers\" />\r\n                </bs.Col> \r\n                <bs.Col xs = {3}>\r\n                    <bs.FormLabel className = \"arrayFormLabel\">Lower Case</bs.FormLabel>\r\n                    <bs.FormCheck className = \"arrayLenRangeFormControl\" onChange = {this.handleChange} name = \"arrIncludeLower\" />\r\n                </bs.Col>\r\n                <bs.Col xs = {3}>\r\n                    <bs.FormLabel  className = \"arrayFormLabel\">Upper Case </bs.FormLabel>\r\n                    <bs.FormCheck className = \"arrayLenRangeFormControl\" onChange = {this.handleChange} name = \"arrIncludeUpper\"/>\r\n                </bs.Col>\r\n                <bs.Col xs = {3}>\r\n                    <bs.FormLabel  className = \"arrayFormLabel\">Special Characters</bs.FormLabel>\r\n                    <bs.FormCheck className = \"arrayLenRangeFormControl\" onChange = {this.handleChange} name = \"arrIncludeSpecial\"/>\r\n                </bs.Col>\r\n            </bs.Row>;\r\n        \r\n        \r\n        return(\r\n            <bs.Container className = \"justify-content-center\" id = \"arrLenRangeContainer\">\r\n                <bs.Row className = \"justify-content-center arrayFormLabel\">\r\n                    <bs.Col xs = {12}>\r\n                        <bs.FormLabel className = \"arrayFormLabel\">Length of the array</bs.FormLabel>\r\n                        <bs.FormControl onChange = {this.handleChange} className = \"arrayLenRangeFormControl\" name = \"arrLen\"  min = \"1\" type = \"number\" placeholder = \"Range: 1 to 1000000\"/>\r\n                    </bs.Col>\r\n                    {(this.props.isNumber) ? isNumber : (this.props.isCharString) ? isCharString : null}\r\n                    \r\n                </bs.Row>\r\n            </bs.Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayLenRange;","import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport \"../../css/array/arrInput.css\";\r\nclass ArrInput extends React.Component{\r\n    render(){\r\n        let isString =\r\n            <bs.Col xs = {3}>\r\n                String length: {this.props.arrayStringLength}\r\n            </bs.Col>;\r\n        let isCharString = \r\n            <bs.Row className = \"justify-content-center\">\r\n                <bs.Col xs = {3}>\r\n                    Array Length: {this.props.arrLen}\r\n                </bs.Col>\r\n                {(this.props.dataType == 'string') ? isString : null}\r\n                <bs.Col xs = {3}>\r\n                    Include Number: {(this.props.arrIncludeNumbers) ? \"Yes\": \"No\"}\r\n                </bs.Col>\r\n                <bs.Col xs = {2}>\r\n                    Include Lower : {(this.props.arrIncludeLower) ? \"Yes\": \"No\"}\r\n                </bs.Col>\r\n                <bs.Col xs = {2}>\r\n                    Include Upper: {(this.props.arrIncludeUpper) ? \"Yes\": \"No\"}\r\n                </bs.Col>\r\n                <bs.Col xs = {2}>\r\n                    Include Special: {(this.props.arrIncludeSpecial) ? \"Yes\": \"No\"}\r\n                </bs.Col>\r\n            </bs.Row>;\r\n        \r\n        let isDecimals = \r\n            <bs.Col xs = {3}>\r\n                Decimals: {this.props.arrDecimals}\r\n            </bs.Col>\r\n        let isIntFloat =\r\n            <bs.Row className = \"justify-content-center\">\r\n                <bs.Col xs = {4}>\r\n                    Array Length: {this.props.arrLen}\r\n                </bs.Col>\r\n                <bs.Col xs = {4}>\r\n                    Min Value: {this.props.arrMin}\r\n                </bs.Col>\r\n                <bs.Col xs = {4}>\r\n                    Max Value: {this.props.arrMax}\r\n                </bs.Col>\r\n                <bs.Col xs = {4}>\r\n                    Array Sort: {(this.props.arrSort) ? \"Yes\" : \"No\"}\r\n                </bs.Col>\r\n                <bs.Col xs = {3}>\r\n                    Allow Repeated: {(this.props.arrRepeated) ? \"Yes\" : \"No\"}\r\n                </bs.Col>\r\n                {(this.props.dataType == 'double') ? isDecimals : null}\r\n            </bs.Row>;\r\n        let isBool = \r\n            <bs.Row>\r\n                <bs.Col xs = {12}>\r\n                    Array Length: {this.props.arrLen}\r\n                </bs.Col>\r\n            </bs.Row>\r\n        return(\r\n            <bs.Container id = \"arrInputContainer\">\r\n                {(this.props.dataType == \"int\" || this.props.dataType == \"double\") ? isIntFloat :\r\n                 (this.props.dataType == \"char\" || this.props.dataType == \"string\") ? isCharString:\r\n                 isBool}\r\n            </bs.Container>\r\n        )\r\n    }\r\n}\r\nexport default ArrInput;","import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport \"../../css/array/arrayExtras.css\";\r\n\r\nclass ArrayExtras extends React.Component{\r\n\r\n    handleChange = (evt) =>{\r\n        this.props.handleChange(evt);\r\n    }\r\n\r\n    render(){\r\n        let isNum = \r\n            <bs.Row className = \"justify-content-center\">\r\n                <bs.Col xs = {4}>\r\n                    <bs.FormLabel>Sort</bs.FormLabel>\r\n                    <bs.FormCheck name = \"arrSort\" onChange = {this.handleChange} />\r\n                </bs.Col>\r\n                <bs.Col xs = {4}>\r\n                    <bs.FormLabel>Allow repeated values</bs.FormLabel>\r\n                    <bs.FormCheck name = \"arrRepeated\" onChange = {this.handleChange}/>\r\n                </bs.Col>\r\n                \r\n            </bs.Row>;\r\n\r\n        return(\r\n            <bs.Container id = \"arrayExtrasContainer\" className = \"justify-content-center\">\r\n                {(this.props.isNum) ? isNum : null}\r\n                <bs.Row className = \"justify-content-center\">\r\n                    <bs.Col xs = {6}>\r\n                    <bs.FormLabel>Opening</bs.FormLabel>\r\n                    <bs.FormControl className = \"formOpenClose justify-content-center\" onChange = {this.handleChange} name = \"opening\" value = {this.props.opening}></bs.FormControl>\r\n                    </bs.Col>\r\n                    <bs.Col xs = {6}>\r\n                    <bs.FormLabel>Closing</bs.FormLabel>\r\n                    <bs.FormControl className = \"formOpenClose justify-content-center\" onChange = {this.handleChange} name = \"closure\" value = {this.props.closure}></bs.FormControl>\r\n                    </bs.Col>\r\n                </bs.Row>\r\n            </bs.Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayExtras;","//https://chancejs.com/\r\nvar chance = require('chance').Chance();\r\n//\r\n\r\nexport const arrayGeneration = (dataType, arraySize, minIn, maxIn, sorted, repeated,decimals,lower,upper,number,special, strLength) => {\r\n    let testCase =  \"\";\r\n    let charPool = \"\";\r\n\r\n    if(lower)\r\n        charPool += \"abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    if(upper)\r\n        charPool += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n    if(number)\r\n        charPool += \"0123456789\";\r\n    \r\n    if(special)\r\n        charPool += \"!@#$%^&*()\";\r\n\r\n    if(!lower && !upper && !number && !special){\r\n        charPool = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\";\r\n    }\r\n    console.log(charPool);\r\n    console.log(lower);\r\n    console.log(upper);\r\n    console.log(number);\r\n    console.log(special);\r\n    \r\n    charPool = String(charPool);\r\n    \r\n    \r\n    if ( minIn > maxIn){\r\n\r\n        let temp = maxIn;\r\n        maxIn = minIn;\r\n        minIn = temp;\r\n    \r\n    }\r\n\r\n    testCase = generateArray(dataType, arraySize, minIn, maxIn,sorted,repeated,decimals,charPool,strLength);\r\n\r\n    \r\n    return testCase;\r\n}\r\n\r\n\r\nlet generateArray = (dataType,arraySize, minIn, maxIn,sorted, repeated,decimals, charPool,strLength) => {\r\n\r\n    let temp = new Array(arraySize);\r\n    let seen = new Array(arraySize);\r\n    let minMaxTurn = false;\r\n    \r\n    for( let i = 0; i < arraySize; i++){\r\n        \r\n        let rand = choiceGenerator(dataType,decimals,minIn,maxIn, charPool,strLength) ;\r\n        \r\n        if((!repeated) && (dataType == 'double' || dataType == 'int')){\r\n\r\n            if( seen.includes(rand) ){\r\n                let limit = 10000;\r\n\r\n                while(seen.includes(rand) && limit > 0){\r\n\r\n                    rand = choiceGenerator(dataType,decimals,minIn,maxIn,charPool, strLength);\r\n                    limit--;\r\n                    \r\n                }\r\n                if(seen.includes(rand)){\r\n                    minIn--;\r\n                    maxIn++;\r\n\r\n                    if(minMaxTurn) \r\n                        rand = minIn;\r\n\r\n                    else   \r\n                        rand = maxIn;\r\n\r\n                    minMaxTurn = !minMaxTurn;\r\n\r\n                }\r\n            }\r\n            seen[i] = rand;\r\n\r\n\r\n\r\n        }else if(dataType == 'char'){\r\n\r\n            if(!charPool.includes(rand)){\r\n                while(!charPool.includes(rand)){\r\n                    rand = choiceGenerator(dataType,decimals,minIn,maxIn,charPool, strLength);\r\n                }\r\n            }\r\n\r\n        }else if(dataType == 'string'){\r\n\r\n            let found = true;\r\n            while(found){\r\n                let changed = false;\r\n                for(let i = 0; i < rand.length; i++){\r\n                    if( charPool.indexOf(rand[i]) == -1){\r\n                        rand = choiceGenerator(dataType, decimals,minIn,maxIn,charPool, strLength);\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!changed){\r\n                    found = false;\r\n                }\r\n            }\r\n\r\n        }\r\n        temp[i] = rand;\r\n\r\n    }\r\n\r\n    if(sorted)\r\n        temp = temp.sort(function(a, b){return a-b});\r\n    \r\n    let testCase = temp.join();\r\n\r\n    if( dataType == 'char')\r\n        return fixCharTest(testCase);\r\n    if(dataType == 'string')\r\n        return fixStringTest(testCase,strLength);\r\n    \r\n    return testCase;\r\n\r\n}\r\n\r\nlet choiceGenerator = (dataType, decimals, minIn, maxIn, charPool, strLength) =>{\r\n\r\n    if(dataType == 'int'){\r\n        \r\n        return chance.integer({ min: parseInt(minIn), max: parseInt(maxIn) });\r\n\r\n    }else if ( dataType == 'double'){\r\n\r\n        return chance.floating({ min: parseFloat(minIn), max: parseFloat(maxIn), fixed: decimals });\r\n    \r\n    }else if ( dataType == 'bool'){\r\n\r\n        return chance.bool();\r\n\r\n    }else if ( dataType == 'char'){\r\n     \r\n        return chance.character({pool : charPool});\r\n\r\n    }else{\r\n        \r\n        return chance.string({ pool: charPool,length : strLength});\r\n    }\r\n\r\n}\r\n\r\nlet fixCharTest = (test) =>{\r\n    let temp = \"\";\r\n    for(let i = 0; i < test.length; i++){\r\n\r\n        if( i % 2 == 0){\r\n            temp += \"\\'\" + test[i] + \"\\'\"\r\n        }else{\r\n            temp += test[i];\r\n        }\r\n\r\n    }\r\n    return temp;\r\n}\r\n\r\nlet fixStringTest = (test, len) =>{\r\n    let temp = \"\";\r\n    let count = 0;\r\n    for(let i = 0; i < test.length;i++, count++){\r\n        if(count % len  == 0){\r\n            temp += '\\\"' + test[i];\r\n        }else if(count % len == len - 1){\r\n            temp += test[i] + '\\\"';\r\n            count = -2;\r\n        }else{\r\n            temp += test[i];\r\n        }\r\n    }\r\n    if(temp[temp.length -1] != '\\\"'){\r\n        temp += \"\\\"\";\r\n    }\r\n    return temp;\r\n}\r\n\r\n\r\nexport default arrayGeneration;","import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport arrayGeneration from \"./arrayTestCaseGenerator\";\r\nimport \"../../css/array/arrayGeneration.css\";\r\n\r\nclass ArrayGeneration extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n\r\n            testCase :\"\"\r\n            \r\n        };\r\n    }\r\n\r\n    generateTestCase = () =>{\r\n        let temp = arrayGeneration(\r\n                this.props.dataType, \r\n                this.props.arrLen, \r\n                this.props.arrMin, \r\n                this.props.arrMax, \r\n                this.props.arrSort, \r\n                this.props.arrRepeated,\r\n                this.props.arrDecimals,\r\n                this.props.arrIncludeLower,\r\n                this.props.arrIncludeUpper,\r\n                this.props.arrIncludeNumbers,\r\n                this.props.arrIncludeSpecial, \r\n                this.props.arrayStringLength);\r\n        this.setState({testCase: temp});\r\n    }\r\n\r\n    copyTestCase = () =>{\r\n        const el = this.textArea;\r\n        el.select();\r\n        document.execCommand(\"copy\")\r\n        alert('Copied to clipboard :)');\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <bs.Container className = \"justify-content-center\" id = \"arrayGenerationContainer\">\r\n                <bs.Row className = \"justify-content-center\">\r\n                    <bs.Button onClick = {this.generateTestCase} className = \"arrayGenerationButton\">Generate</bs.Button>\r\n                </bs.Row>\r\n                <bs.Row className = \"justify-content-center\">\r\n                    <textArea  readOnly = \"true\" className = \"justify-content-center\"id = \"arrayGenerationLabel\"\r\n                        ref={(textarea) => this.textArea = textarea}\r\n                    >\r\n                        {this.props.opening}{this.state.testCase}{this.props.closure}\r\n                    </textArea>\r\n                </bs.Row>\r\n                <bs.Row className = \"justify-content-center\">\r\n                    <bs.Button onClick = {this.copyTestCase} className = \"arrayGenerationButton\">Copy</bs.Button>\r\n                </bs.Row>\r\n            </bs.Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrayGeneration;","import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport ArrayDataType from \"./arrayDataType.js\";\r\nimport ArrayLenRange from \"./arrayLenRange.js\";\r\nimport ArrInput from \"./arrInput.js\"\r\nimport ArrayExtras from \"./arrayExtras.js\";\r\nimport ArrayGeneration from \"./arrayGeneration\";\r\nimport \"../../css/array/array.css\";\r\n\r\nclass Array extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            dataType : \"int\",\r\n            arrLen : 1,\r\n            arrMin : -1000000,\r\n            arrMax :  1000000,\r\n            arrDecimals:1,\r\n            arrIncludeNumbers: false,\r\n            arrIncludeLower: false,\r\n            arrIncludeUpper: false,\r\n            arrIncludeSpecial: false,\r\n            arrSort: false,\r\n            arrRepeated: false,\r\n            arrayStringLength : 1,\r\n            opening: \"[\",\r\n            closure: \"]\"\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.setState({dataType: \"int\"});\r\n    }\r\n\r\n    handleDataType = (daTy) =>{\r\n        this.setState({dataType: daTy});\r\n    }\r\n\r\n    handleChange = (changed) =>{\r\n        if(changed.target.name === 'arrIncludeNumbers'){\r\n            this.setState({arrIncludeNumbers: !this.state.arrIncludeNumbers});\r\n        }\r\n        else if(changed.target.name === 'arrIncludeLower'){\r\n            this.setState({arrIncludeLower: !this.state.arrIncludeLower});\r\n        }\r\n        else if(changed.target.name === 'arrIncludeUpper'){\r\n            this.setState({arrIncludeUpper: !this.state.arrIncludeUpper});\r\n        }\r\n        else if(changed.target.name === 'arrIncludeSpecial'){\r\n            this.setState({arrIncludeSpecial: !this.state.arrIncludeSpecial});\r\n\r\n        }else if(changed.target.name === \"arrLen\" && parseInt(changed.target.value) >= 1 && parseInt([changed.target.value]) <= 1000000){\r\n            this.setState({[changed.target.name]: parseInt([changed.target.value])});\r\n\r\n        }else if (changed.target.name == \"arrayStringLength\" && (parseInt([changed.target.value])>= 1 && parseInt([changed.target.value]) <= 1000000)){\r\n            this.setState({[changed.target.name]: parseInt([changed.target.value])});\r\n\r\n        }else if (changed.target.name === \"arrMin\" && changed.target.value >= -1000000 && changed.target.value <= this.state.arrMax && changed.target.value != \"\"){\r\n            if(this.state.dataType == 'double')\r\n                this.setState({[changed.target.name]: parseFloat([changed.target.value])});\r\n            else\r\n                this.setState({[changed.target.name]: parseInt([changed.target.value])});\r\n\r\n        }else if (changed.target.name === \"arrMax\" && changed.target.value <= 1000000 && changed.target.value >= this.state.arrMin && changed.target.valuer != \"\"){\r\n            if(this.state.dataType == 'double')\r\n                this.setState({[changed.target.name]: parseFloat([changed.target.value])});\r\n            else\r\n                this.setState({[changed.target.name]: parseInt([changed.target.value])});\r\n\r\n        }else if (changed.target.name === 'arrDecimals' && parseInt(changed.target.value) >= 1 && parseInt(changed.target.value) <= 20){\r\n            this.setState({[changed.target.name]: parseInt([changed.target.value])})\r\n        }else if (changed.target.name === 'arrSort'){\r\n            this.setState({arrSort: !this.state.arrSort});\r\n        }else if (changed.target.name === 'arrRepeated'){\r\n            this.setState({arrRepeated: !this.state.arrRepeated});\r\n        }else if ((changed.target.name == \"opening\" || changed.target.name == \"closure\")){\r\n            this.setState({[changed.target.name] : [changed.target.value]})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n           <bs.Container className = \"justify-content-center\">\r\n               <ArrayDataType\r\n                    handleDataType = {this.handleDataType}\r\n               />\r\n               <ArrayLenRange\r\n                    isNumber = {(this.state.dataType == \"int\" || this.state.dataType == \"double\")}\r\n                    isCharString = {(this.state.dataType == \"char\" || this.state.dataType == \"string\")}\r\n                    isBool = {(this.state.dataType == \"bool\")}\r\n                    isString = {(this.state.dataType == 'string')}\r\n                    isDecimal = {(this.state.dataType == \"double\")}\r\n                    handleChange = {this.handleChange}\r\n               />\r\n               \r\n               <ArrayExtras\r\n                    isNum = {(this.state.dataType == 'int' || this.state.dataType == 'double')}\r\n                    handleChange = {this.handleChange}\r\n                    opening = {this.state.opening}\r\n                    closure = {this.state.closure}\r\n               />\r\n               <ArrInput\r\n                    dataType = {this.state.dataType}\r\n                    arrLen = {this.state.arrLen}\r\n                    arrMin = {this.state.arrMin}\r\n                    arrMax = {this.state.arrMax}\r\n                    arrDecimals = {this.state.arrDecimals}\r\n                    arrIncludeLower = {this.state.arrIncludeLower}\r\n                    arrIncludeUpper = {this.state.arrIncludeUpper}\r\n                    arrIncludeSpecial = {this.state.arrIncludeSpecial}\r\n                    arrIncludeNumbers = {this.state.arrIncludeNumbers}\r\n                    arrSort = {this.state.arrSort}\r\n                    arrRepeated = {this.state.arrRepeated}\r\n                    arrayStringLength = {this.state.arrayStringLength}\r\n               />\r\n              <ArrayGeneration\r\n                    dataType = {this.state.dataType}\r\n                    arrLen = {this.state.arrLen}\r\n                    arrMin = {this.state.arrMin}\r\n                    arrMax = {this.state.arrMax}\r\n                    arrDecimals = {this.state.arrDecimals}\r\n                    arrIncludeLower = {this.state.arrIncludeLower}\r\n                    arrIncludeUpper = {this.state.arrIncludeUpper}\r\n                    arrIncludeSpecial = {this.state.arrIncludeSpecial}\r\n                    arrIncludeNumbers = {this.state.arrIncludeNumbers}\r\n                    arrSort = {this.state.arrSort}\r\n                    arrRepeated = {this.state.arrRepeated}\r\n                    arrayStringLength = {this.state.arrayStringLength}\r\n                    opening = {this.state.opening}\r\n                    closure = {this.state.closure}\r\n                    \r\n              />\r\n           </bs.Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Array;","import React, {Component} from \"react\"\r\nimport * as bs from \"react-bootstrap\";\r\nimport \"../css/mainView.css\";\r\nimport String from \"./string.js\";\r\nimport Array from \"./array/array.js\";\r\nimport Matrix from \"./matrix.js\";\r\nimport Tree from \"./tree.js\";\r\nimport Graph from \"./graph.js\";\r\nimport Custom from \"./custom.js\";\r\n\r\nclass MainView extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            currentView: <Array/>\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({currentView: <Array/>});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <bs.Container className = \"mainContainer\">\r\n                <bs.Navbar id = \"mainNavbar\">\r\n                    <bs.Container className = \"mainContainer\">\r\n                        <bs.Row className = \"mainRow\" >\r\n                            <bs.Col \r\n                                xs = {2}\r\n                                className = \"mainCol\"\r\n                            >\r\n                                <bs.Button className = \"notDone mainButton\">String</bs.Button>\r\n                            </bs.Col>\r\n                            <bs.Col \r\n                                xs = {2}\r\n                                className = \"mainCol\"\r\n                            >\r\n                                <bs.Button className = \"mainButton\">Array</bs.Button>\r\n                            </bs.Col>\r\n                            <bs.Col \r\n                                xs = {2}\r\n                                className = \"mainCol\"\r\n                            >\r\n                                <bs.Button className = \"notDone mainButton\">Matrix</bs.Button>\r\n                            </bs.Col>\r\n                            <bs.Col \r\n                                xs = {2}\r\n                                className = \"mainCol\"\r\n                            >\r\n                                <bs.Button className = \"notDone mainButton\">Tree</bs.Button>\r\n                            </bs.Col>\r\n                            <bs.Col \r\n                                xs = {2}\r\n                                className = \"mainCol\"\r\n                            >\r\n                                <bs.Button className = \"notDone mainButton\">Graph</bs.Button>\r\n                            </bs.Col>\r\n                            <bs.Col \r\n                                xs = {2}\r\n                                className = \"mainCol\"\r\n                            >\r\n                                <bs.Button className = \"notDone mainButton\">Custom</bs.Button>\r\n                            </bs.Col>\r\n                        </bs.Row>\r\n                    </bs.Container>\r\n                </bs.Navbar>\r\n                <bs.Row>\r\n                    {this.state.currentView}\r\n                </bs.Row>\r\n            </bs.Container>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MainView;","import React, {Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport MainView from \"./ui/mainView.js\";\r\nclass App extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div align = \"center\">\r\n\r\n                <MainView></MainView>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}